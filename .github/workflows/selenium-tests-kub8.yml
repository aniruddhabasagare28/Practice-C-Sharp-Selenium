name: Run Selenium Tests on K8s Grid

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  selenium-tests:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v3

      - name: üîß Set up .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: üöÄ Install Kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" || true
          chmod +x kubectl || true
          sudo mv kubectl /usr/local/bin/ || true
          kubectl version --client || true
        continue-on-error: true

      - name: üîÑ Start Minikube (Local Kubernetes)
        uses: medyagh/setup-minikube@v0.0.14
        with:
          driver: docker

      - name: üì¶ Deploy Selenium Grid to Kubernetes
        run: |
          kubectl apply -f SeleniumFramework/01-k8s-grid/selenium-grid.yaml || true
          echo "Waiting for pods to start..."
          sleep 10
        continue-on-error: true

      - name: ‚è≥ Wait for Selenium Hub and Nodes to be Ready
        run: |
          timeout=30  # Max wait time in seconds
          elapsed=0
          interval=5   # Check interval in seconds
      
          echo "Waiting for Selenium Hub to be ready..."
          while [[ $(kubectl get pods -l app=selenium-hub -o 'jsonpath={.items[*].status.containerStatuses[*].ready}' | grep -c "true") -lt 1 ]]; do
            echo "üîÑ Hub not ready yet..."
            kubectl get pods -l app=selenium-hub || true
            sleep $interval
            elapsed=$((elapsed + interval))
      
            if [[ $elapsed -ge $timeout ]]; then
              echo "‚ùå Timeout reached while waiting for Selenium Hub! Proceeding anyway..."
              break
            fi
          done
          echo "‚úÖ Proceeding to next step."

          elapsed=0  # Reset elapsed time for Chrome nodes

          echo "Waiting for all Chrome nodes to be ready..."
          while [[ $(kubectl get pods -l app=selenium-node-chrome -o 'jsonpath={.items[*].status.containerStatuses[*].ready}' | grep -c "true") -lt 2 ]]; do
            echo "üîÑ Chrome nodes not ready yet..."
            kubectl get pods -l app=selenium-node-chrome || true
            sleep $interval
            elapsed=$((elapsed + interval))
      
            if [[ $elapsed -ge $timeout ]]; then
              echo "‚ùå Timeout reached while waiting for Chrome nodes! Proceeding anyway..."
              break
            fi
          done
          echo "‚úÖ Proceeding to next step."
        continue-on-error: true

      - name: üîÄ Port Forward Selenium Grid (Background)
        run: |
          nohup kubectl port-forward svc/selenium-hub 4444:4444 > port-forward.log 2>&1 & || true
          sleep 10  # Give it time to start
        continue-on-error: true

      - name: üåê Check if Selenium Grid is Running and Nodes are Connected
        run: |
          echo "Checking Selenium Grid status..."
          sleep 60
          response=$(curl -s http://localhost:4444/status || echo "{}") 

          # Check if Grid is ready
          if [[ $(echo "$response" | jq -r '.value.ready' || echo "false") == "false" ]]; then
            echo "‚ùå Selenium Grid is not ready, but proceeding..."
          fi

          # Check if Nodes are connected
          nodes_count=$(echo "$response" | jq '.value.nodes | length' || echo "0")
          if [[ "$nodes_count" -lt 2 ]]; then
            echo "‚ùå Not enough nodes connected to Selenium Hub, but proceeding..."
          fi

          echo "‚úÖ Proceeding to test execution."
        continue-on-error: true

      - name: üèÉ Run Selenium Tests
        run: |
          dotnet test --settings SeleniumFramework/test.runsettings SeleniumFramework/SeleniumFramework.csproj --logger "trx;LogFileName=TestResults.trx" || true
        continue-on-error: true

      - name: üì§ Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: SeleniumFramework/TestResults.trx
        continue-on-error: true

      - name: üßπ Cleanup Kubernetes Resources
        if: always()
        run: |
          echo "Deleting Kubernetes resources..."
          kubectl delete -f SeleniumFramework/01-k8s-grid/selenium-grid.yaml || true
          kubectl delete pod --all || true
          echo "Cleanup complete."
        continue-on-error: true
